# -*- coding: utf-8 -*-
"""2_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18JS2ItHf2v-78j3JqsBSA9-gCrJ8ei7Q

**Main Code::::::**
"""

from prettytable import PrettyTable
class SymbolTable:
    sl=1
    
    def __init__(self,sl, var_name, data_type,data_value):
        self.sl=sl
        self.var_name = var_name
        self.data_type = data_type
        self.data_value = data_value
           
symbol_table = []   

def has_match_found(var_name: str, symbol_table: list):
      index = -1

      if len(symbol_table) < 0:
          return False, index

      for index, el in enumerate(symbol_table):
          data: SymbolTable = el
          if data.var_name == var_name:
              return True, index

      return False, index   

while True:
  user_data = input('[INPUT]')
  remove_1=user_data.replace('(',' ')
  remove_2=remove_1.replace(';',' ')
  remove_3=remove_2.replace(')',' ')
  comma_count =0
  data_list=remove_3.split(' ')
  command=data_list[0].lower()
  a=[]
  k=0
  


  if command == 'insert':
      #var_name = data_list[2].strip()
      data_type = data_list[1].strip()
      data_list1=remove_3.split(data_type)
      #print(data_list1)
      for i in remove_3:
        if i == ',':
          comma_count +=1
      #print(comma_count)    

      if comma_count == 0:
        if remove_3.find('=') == -1:
          var_name = data_list[2].strip()
          data_value = 'Null' 
          is_match_found = has_match_found(var_name=var_name, symbol_table=symbol_table)[0]
          if is_match_found == True:
              print('Same Variable name already insert !!!!!!!!!!')
          else: 
              sl_number = SymbolTable.sl
              SymbolTable.sl+=1
              #print(sl_number)
              symbol_table.append(SymbolTable(sl=sl_number, var_name=var_name, data_type=data_type,data_value=data_value))
              print('Sucessfully Insert')
           
          
        else:
          data_eq = data_list1[1].split('=')
          #print(data_eq)
          var_name = data_eq[0].strip()
          data_value = data_eq[1].strip()
          is_match_found = has_match_found(var_name=var_name, symbol_table=symbol_table)[0]
          if is_match_found == True :
              print('Same Variable name already insert !!!!!!!!!!')
          else: 
              sl_number = SymbolTable.sl
              SymbolTable.sl+=1
              #print(sl_number)
              symbol_table.append(SymbolTable(sl=sl_number, var_name=var_name, data_type=data_type,data_value=data_value))
              print('Sucessfully Insert')
         
          
      else:
        comma_split= data_list1[1].split(',')
        #print(comma_split)

        for c in range(comma_count +1) :
          if comma_split[c].find('=') == -1:
            var_name=comma_split[c].strip()
            data_value='NUll'
            is_match_found = has_match_found(var_name=var_name, symbol_table=symbol_table)[0]
            if is_match_found ==True:
              print('Same Variable name already insert !!!!!!!!!!')
            else:  
              sl_number = SymbolTable.sl
              SymbolTable.sl+=1
              #print(sl_number)
              symbol_table.append(SymbolTable(sl=sl_number, var_name=var_name, data_type=data_type,data_value=data_value))
              print('Sucessfully Insert')
             
          else:
            split_comma=comma_split[c].split('=')
            var_name=split_comma[0].strip()
            data_value=split_comma[1].strip()
            is_match_found = has_match_found(var_name=var_name, symbol_table=symbol_table)[0]
            if is_match_found == True:
              print('Same Variable name already insert !!!!!!!!!!')
            else: 
              sl_number = SymbolTable.sl
              SymbolTable.sl+=1
              #print(sl_number)
              symbol_table.append(SymbolTable(sl=sl_number, var_name=var_name, data_type=data_type,data_value=data_value))
              print('Sucessfully Insert')
            
     


        
  elif command == 'lookup':
      var_name=data_list[1]
      is_match_found, index = has_match_found(var_name=var_name, symbol_table=symbol_table)

      if not is_match_found:
        print('Not Found')
          
      symbol_table_data: SymbolTable = symbol_table[index]
      #return f"Match found. Hash key is -> {symbol_table_data.hash_key} and Data Type -> {symbol_table_data.data_type}"
      table=PrettyTable(['SL','NAME','TYPE','VALUE'])
      #print('SL     NAME    TYPE     VALUE')

          #print(f"sl number is: {el.sl} Hash key is: {_el.hash_key} --> Name: {_el.var_name}  --&&-- DataType: {_el.data_type}")
          #print('SL     NAME    TYPE     VALUE')
          #print(f"{_el.sl}  {_el.var_name}   {_el.data_type} {_el.data_value}  ")
      table.add_row([symbol_table_data.sl , symbol_table_data.var_name  , symbol_table_data.data_type , symbol_table_data.data_value])
      print(table)

  elif command == 'exit':
     break
  elif command == 'lookupall':
    table=PrettyTable(['SL','NAME','TYPE','VALUE'])
      #print('SL     NAME    TYPE     VALUE')
    for el in symbol_table:
          _el: SymbolTable = el

          #print(f"sl number is: {el.sl} Hash key is: {_el.hash_key} --> Name: {_el.var_name}  --&&-- DataType: {_el.data_type}")
          #print('SL     NAME    TYPE     VALUE')
          #print(f"{_el.sl}  {_el.var_name}   {_el.data_type} {_el.data_value}  ")
          table.add_row([_el.sl , _el.var_name  , _el.data_type , _el.data_value])
    print(table)
    
  elif command == 'update':
      var_name1=data_list[1].strip()
      #print(var_name1)
      var_name2 =var_name1.split(',')
      #print(var_name2)
      var_name=var_name2[0]
      #print(var_name)
      is_match_found, index = has_match_found(var_name=var_name, symbol_table=symbol_table)

      if not is_match_found:
        print('Not Found')
          #return "Sorry! No Match. Name not found! \n"
      else:
          data_value = var_name2[1]
      symbol_table_data: SymbolTable = symbol_table[index]

      if symbol_table_data.data_value == data_value:
        print('You enter same data type. Nothing to update!')
          #return "You enter same data type. Nothing to update! \n"
      else:    
        symbol_table_data.data_value = data_value
        symbol_table[index] = symbol_table_data
        print('Update Successful')
      #return "Update Successful \n"

  elif command == 'drop':
    var_name=data_list[1]        
    is_match_found, index = has_match_found(var_name=var_name, symbol_table=symbol_table)

    if not is_match_found:
      print('Sorry! No Match. Name not found!')
    else:
      del symbol_table[index]
      print('Drop successfully')
  #return "Delete successful! \n" 
  else:
    print('Wrong Command \n')
    print('Command like \n **insert(value)** \n **drop(value)** \n **update(value,value)**  \n **lookupall** \n **lookup(value)** \n')
